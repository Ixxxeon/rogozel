{"remainingRequest":"/Users/ixeon/Rogozel/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Users/ixeon/Rogozel/node_modules/ts-loader/index.js??ref--9-3!/Users/ixeon/Rogozel/node_modules/eslint-loader/dist/cjs.js!/Users/ixeon/Rogozel/src/main/webapp/app/core/auth/auth-session.service.ts","dependencies":[{"path":"/Users/ixeon/Rogozel/src/main/webapp/app/core/auth/auth-session.service.ts","mtime":1575131945730},{"path":"/Users/ixeon/Rogozel/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/ixeon/Rogozel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ixeon/Rogozel/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ixeon/Rogozel/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/ixeon/Rogozel/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tICJ0c2xpYiI7CnZhciBfYTsKaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnOwppbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJzsKaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnOwppbXBvcnQgeyBTRVJWRVJfQVBJX1VSTCB9IGZyb20gJ2FwcC9hcHAuY29uc3RhbnRzJzsKbGV0IEF1dGhTZXJ2ZXJQcm92aWRlciA9IGNsYXNzIEF1dGhTZXJ2ZXJQcm92aWRlciB7CiAgICBjb25zdHJ1Y3RvcihodHRwKSB7CiAgICAgICAgdGhpcy5odHRwID0gaHR0cDsKICAgIH0KICAgIGxvZ2luKGNyZWRlbnRpYWxzKSB7CiAgICAgICAgY29uc3QgZGF0YSA9IGB1c2VybmFtZT0ke2VuY29kZVVSSUNvbXBvbmVudChjcmVkZW50aWFscy51c2VybmFtZSl9YCArCiAgICAgICAgICAgIGAmcGFzc3dvcmQ9JHtlbmNvZGVVUklDb21wb25lbnQoY3JlZGVudGlhbHMucGFzc3dvcmQpfWAgKwogICAgICAgICAgICBgJnJlbWVtYmVyLW1lPSR7Y3JlZGVudGlhbHMucmVtZW1iZXJNZX1gICsKICAgICAgICAgICAgJyZzdWJtaXQ9TG9naW4nOwogICAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKS5zZXQoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTsKICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QoU0VSVkVSX0FQSV9VUkwgKyAnYXBpL2F1dGhlbnRpY2F0aW9uJywgZGF0YSwgeyBoZWFkZXJzIH0pOwogICAgfQogICAgbG9nb3V0KCkgewogICAgICAgIC8vIGxvZ291dCBmcm9tIHRoZSBzZXJ2ZXIKICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QoU0VSVkVSX0FQSV9VUkwgKyAnYXBpL2xvZ291dCcsIHt9LCB7IG9ic2VydmU6ICdyZXNwb25zZScgfSkucGlwZShtYXAoKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgICAgIC8vIHRvIGdldCBhIG5ldyBjc3JmIHRva2VuIGNhbGwgdGhlIGFwaQogICAgICAgICAgICB0aGlzLmh0dHAuZ2V0KFNFUlZFUl9BUElfVVJMICsgJ2FwaS9hY2NvdW50Jykuc3Vic2NyaWJlKCgpID0+IHsgfSwgKCkgPT4geyB9KTsKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICAgIH0pKTsKICAgIH0KfTsKQXV0aFNlcnZlclByb3ZpZGVyID0gdHNsaWJfMS5fX2RlY29yYXRlKFsKICAgIEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSksCiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoImRlc2lnbjpwYXJhbXR5cGVzIiwgW3R5cGVvZiAoX2EgPSB0eXBlb2YgSHR0cENsaWVudCAhPT0gInVuZGVmaW5lZCIgJiYgSHR0cENsaWVudCkgPT09ICJmdW5jdGlvbiIgPyBfYSA6IE9iamVjdF0pCl0sIEF1dGhTZXJ2ZXJQcm92aWRlcik7CmV4cG9ydCB7IEF1dGhTZXJ2ZXJQcm92aWRlciB9Owo="},{"version":3,"file":"/Users/ixeon/Rogozel/src/main/webapp/app/core/auth/auth-session.service.ts","sourceRoot":"","sources":["/Users/ixeon/Rogozel/node_modules/eslint-loader/dist/cjs.js!/Users/ixeon/Rogozel/src/main/webapp/app/core/auth/auth-session.service.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAgB,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAE7E,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAGnD,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAC7B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAG,CAAC;IAExC,KAAK,CAAC,WAAW;QACf,MAAM,IAAI,GACR,YAAY,kBAAkB,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE;YACtD,aAAa,kBAAkB,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE;YACvD,gBAAgB,WAAW,CAAC,UAAU,EAAE;YACxC,eAAe,CAAC;QAClB,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;QAE3F,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,oBAAoB,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;IAClF,CAAC;IAED,MAAM;QACJ,yBAAyB;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,YAAY,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC,IAAI,CACpF,GAAG,CAAC,CAAC,QAA2B,EAAE,EAAE;YAClC,uCAAuC;YACvC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,GAAG,aAAa,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,GAAE,CAAC,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YAC5E,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;CACF,CAAA;AAxBY,kBAAkB;IAD9B,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;iEAEP,UAAU,oBAAV,UAAU;GADzB,kBAAkB,CAwB9B;SAxBY,kBAAkB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { SERVER_API_URL } from 'app/app.constants';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthServerProvider {\n  constructor(private http: HttpClient) {}\n\n  login(credentials): Observable<any> {\n    const data =\n      `username=${encodeURIComponent(credentials.username)}` +\n      `&password=${encodeURIComponent(credentials.password)}` +\n      `&remember-me=${credentials.rememberMe}` +\n      '&submit=Login';\n    const headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.http.post(SERVER_API_URL + 'api/authentication', data, { headers });\n  }\n\n  logout(): Observable<any> {\n    // logout from the server\n    return this.http.post(SERVER_API_URL + 'api/logout', {}, { observe: 'response' }).pipe(\n      map((response: HttpResponse<any>) => {\n        // to get a new csrf token call the api\n        this.http.get(SERVER_API_URL + 'api/account').subscribe(() => {}, () => {});\n        return response;\n      })\n    );\n  }\n}\n"]}]}